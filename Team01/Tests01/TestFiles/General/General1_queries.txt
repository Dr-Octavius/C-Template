0 - Next - Same synonym
stmt s;
Select s such that Next(s, s)
none
5000
1 - Next - All possible
stmt s1; stmt s2;
Select <s1, s2> such that Next(s1, s2)
1 2,12 13,13 14,13 24,14 15,14 25,15 16,15 26,16 17,16 22,17 18,17 19,17 20,17 23,18 13,18 21,2 3,21 16,27 28,28 29,29 30,3 4,3 40,30 27,30 31,30 33,31 32,33 34,34 35,35 36,4 5,40 41,40 44,40 52,41 42,42 43,43 52,44 45,45 46,46 47,46 48,46 50,47 52,48 49,48 51,5 27,5 37,5 6,52 53,54 55,55 56,56 57,56 59,57 58,6 38,6 7,7 11,7 39,7 8,7 9,8 12,8 3,9 10
5000
36 - With: procName, procedure.procName
procedure p, p1;
Select p with p.procName = p1.procName
child,child2,double,single
5000
1 - With - Valid
call c;
Select c with c.procName = "single"
10, 24, 52
5000
2 - Read with
read r;
Select r with r.varName = "y"
34, 37
5000
3 - Next
stmt s;
Select s such that Next(3, s)
4, 40
5000
1 - Calls - Invalid
call c;
Select c such that Calls(c, "single")
SemanticError
5000
2 - Calls - Valid
procedure p;
Select p such that Calls(p, "single")
double
5000
4 - Tuple
stmt s1; stmt s2;
Select <s1, s2> with s1.stmt# = 3
3 1,3 10,3 11,3 12,3 13,3 14,3 15,3 16,3 17,3 18,3 19,3 2,3 20,3 21,3 22,3 23,3 24,3 25,3 26,3 27,3 28,3 29,3 3,3 30,3 31,3 32,3 33,3 34,3 35,3 36,3 37,3 38,3 39,3 4,3 40,3 41,3 42,3 43,3 44,3 45,3 46,3 47,3 48,3 49,3 5,3 50,3 51,3 52,3 53,3 54,3 55,3 56,3 57,3 58,3 59,3 6,3 60,3 61,3 7,3 8,3 9
5000
0 - Single Clause: Next: 2 literals
stmt s;
Select BOOLEAN such that Next(1, 2)
TRUE
5000
0 - Single Clause: Next: 2 literals
stmt s;
Select BOOLEAN such that Next(3, 5)
FALSE
5000
1 - Multi-clauses(No Pattern and No With): Uses, Modifies, Follows*, Parent*
assign a; stmt s, s1; variable v;
Select a such that Uses(a, v) and Modifies(a, v) and Follows*(s, s1) and Parent*(s, a)
19, 29, 36, 41, 42, 47
5000
2 - Multi-clauses(No Pattern and No With): Uses, Modifies, Follows*, Parent*
assign a; stmt s, s1; variable v;
Select a such that Uses(a, v) and Modifies(a, v) and Follows*(s, a) and Parent*(s, s1)
none
5000
3 - Multi-clauses(No Pattern and No With): Uses, Modifies, Follows*, Parent*
assign a; stmt s, s1; variable v, v1;
Select a such that Uses("single", v) and Modifies(a, v1) and Follows*(a, s1) and Parent*(s1, s)
1, 2, 4, 6, 12, 14, 15, 28, 29, 44, 55
5000
4 - Multi-clauses(No Pattern and No With): Uses, Modifies
variable v;
Select v.varName such that Modifies("double", v) and Uses("single", v)
c, p, x, y, z
5000
5 - Multi-clauses(No Pattern and No With): Uses, Modifies, Follows
stmt s, s1; variable v;
Select <s, v, s1> such that Modifies(s, "var") and Uses(s1, v) and Follows(s, s1)
40 c 52, 40 p 52, 40 q 52, 40 x 52, 40 y 52, 40 z 52, 42 var 43
5000
6 - Multi-clauses(No Pattern and No With): Calls, Uses, Modifies
variable v; procedure proc, proc1;
Select <proc, proc1, v> such that Calls(proc, proc1) and Uses(proc1, v) and Modifies(proc, v)
double child2 y, double single c, double single p, double single x, double single y, double single z
5000
7 - Multi-clauses(No Pattern and No With): Calls, Calls*, Modifies
procedure p, p1, p2; variable v; read r;
Select <p, p2, r> such that Calls(p, p1) and Calls*(p1, p2) and Modifies(p2, v) and Modifies(r, v)
double child 25,double child 54,double child 60
5000
8 - Multi-clauses(No Pattern and With): Calls, Calls*, Next*
procedure p, p1, p2; stmt s; call c;
Select s such that Calls(p, p1) and Calls*(p1, p2) and Next*(s, c) with c.procName = p.procName
none
5000
9 - Multi-clauses(No Pattern and With): Follows, Parent*,, Uses, Modifies
stmt s; if ifs; call c, c1; variable v;
Select s such that Follows(s, ifs) and Parent*(ifs, c) and Uses(c, v) and Modifies(c1, v) with c.procName = c1.procName
4, 6
5000
10 - Multi-clauses(Pattern and No With): Uses, Modifies, Parent
assign a; variable v; if ifs;
Select a such that Uses(a, v) and Modifies(a, v) and Parent(ifs, a) pattern a(v, _)
19, 36, 41, 42, 47
5000
11 - Multi-clauses(Pattern and No With): Uses, Modifies, Parent*, Follows*
assign a; read r; print p; variable v; stmt s, s1;
Select a such that Uses(p, v) and Modifies(r, v) and Follows*(s, a) and Parent*(s1, a) pattern a(v, "x + y + (a + b * c) * 29 * 29")
29
5000
12 - Multi-clauses(Pattern and No With): Calls*, Modifies, Uses
procedure p, p1; variable v; assign a;
Select v.varName such that Calls*(p, p1) and Modifies(p1, v) and Uses(a, v) pattern a(v, _)
x
5000
13 - Multi-clauses(Pattern and No With): Parent, Modifies, Follows*
stmt s, s1; variable v; assign a, a1;
Select s such that Parent(s, s1) such that Modifies(s1, v) pattern a(v, _) such that Follows*(s1, a1) pattern a1("a", _)
5, 16, 30
5000
14 - Multi-clauses(Pattern and No With): Parent, Modifies, Follows*
stmt s, s1; variable v; assign a, a1;
Select s such that Parent(s, s1) and Modifies(s1, v) pattern a(v, "invalid") such that Follows*(s1, a1) pattern a1("a", _)
none
5000
15 - Multi-clauses(Pattern and No With): Parent*, Modifies, Follows*, Uses
stmt s, s1; variable v, v1; assign a, a1; read r;
Select s such that Parent*(s, r) and Modifies(r, v) pattern a(v, _) such that Follows*(r, a1) and Uses(a1, v1) pattern a1("a", _)
3, 5, 27, 30
5000
16 - Multi-clauses(Pattern and With): Follows*, Parent, Uses, Modifies
print p; variable v, v1; assign a; read r; stmt s, s1;
Select v such that Follows*(s, p) and Follows*(s, r) and Parent(s1, a) and Uses(p, v) and Modifies(r, v1) pattern a(v, _"a"_) with v.varName = v1.varName
x
5000
17 - Multi-clauses(Pattern and With): Uses, Modifies, Parent
assign a; variable v; if ifs;
Select a such that Uses(a, v) and Modifies(a, v) and Parent(ifs, a) with ifs.stmt# = 17 pattern a(v, _)
19
5000
1 - With: int, ident (invalid)
read r;
Select r with "x" = 1
SemanticError
5000
2 - With: int, int (invalid)
print p;
Select p with 1 = 2
none
5000
3 - With: int, int (valid)
read r;
Select r with 1 = 1
20, 22, 25, 34, 37, 45, 54, 60, 9
5000
4 - With: int, procedure.procName (invalid)
procedure p;
Select p with 1 = p.procName
SemanticError
5000
5 - With: int, call.procName (invalid)
call c;
Select c with 1 = c.procName
SemanticError
5000
6 - With: int, variable.varName (invalid)
variable v;
Select v with 1 = v.varName
SemanticError
5000
7 - With: int, read.varName (invalid)
read r;
Select r with 1 = read.varName
SemanticError
5000
8 - With: int, print.varName (invalid)
print p;
Select p with 1 = p.varName
SemanticError
5000
9 - With: int, constant.value
constant c;
Select BOOLEAN with 1 = c.value
TRUE
5000
10 - With: int, stmt.stmt#
stmt s;
Select s with 10 = s.stmt#
10
5000
11 - With: int, read.stmt#
read r;
Select BOOLEAN with 9 = r.stmt#
TRUE
5000
12 - With: int, print.stmt#
print p;
Select BOOLEAN with 11 = p.stmt#
TRUE
5000
13 - With: int, call.stmt#
call c;
Select BOOLEAN with 10 = c.stmt#
TRUE
5000
14 - With: int, while.stmt#
while w;
Select BOOLEAN with 3 = w.stmt#
TRUE
5000
15 - With: int, if.stmt#
if ifs;
Select BOOLEAN with 30 = ifs.stmt#
TRUE
5000
16 - With: int, assign.stmt#
assign a;
Select BOOLEAN with 42 = a.stmt#
TRUE
5000
17 - With: ident, ident (valid)
procedure p;
Select p with "x" = "x"
single, child, child2, double
5000
18 - With: ident, ident (invalid)

Select BOOLEAN with "x" = "y"
FALSE
5000
19 - With: ident, int (invalid)
procedure p;
Select p with "x" = 1
SemanticError
5000
20 - With: ident, procedure.procName
procedure p;
Select BOOLEAN with "single" = p.procName
TRUE
5000
21 - With: ident, call.procName
call c;
Select c with "single"	 = c.procName
10, 24, 52
5000
22 - With: ident, variable.varName
variable v;
Select BOOLEAN with "q" = v.varName
TRUE
5000
23 - With: ident, read.varName
read r;
Select r with "x" = r.varName
25, 54, 60
5000
24 - With: ident, print.varName
print p;
Select p with "c" = p.varName
59
5000
25 - With: ident, constant.value (invalid)
constant c;
Select c with "x" = c.value
SemanticError
5000
26 - With: ident, stmt.stmt# (invalid)
stmt s;
Select s with "x" = s.stmt#
SemanticError
5000
27 - With: ident, read.stmt# (invalid)
read r;
Select r with "x" = r.stmt#
SemanticError
5000
28 - With: ident, print.stmt# (invalid)
print p;
Select p with "x" = p.stmt#
SemanticError
5000
29 - With: ident, call.stmt# (invalid)
call c;
Select c with "x" = c.stmt#
SemanticError
5000
30 - With: ident, while.stmt# (invalid)
while w;
Select w with "x" = w.stmt#
SemanticError
5000
31 - With: ident, if.stmt# (invalid)
if ifs;
Select ifs with "x" = ifs.stmt#
SemanticError
5000
32 - With: ident, assign.stmt# (invalid)
assign a;
Select a with "x" = a.stmt#
SemanticError
5000
33 - With: procName, ident (valid)
procedure p;
Select BOOLEAN with p.procName = "double"
TRUE
5000
34 - With: procName, ident (invalid)
procedure p;
Select BOOLEAN with p.procName = "InvalidProcedure"
FALSE
5000
35 - With: procName, int (invalid)
procedure p;
Select BOOLEAN with p.procName = 1
SemanticError
5000
37 - With: procName, call.procName
procedure p; call c;
Select p with p.procName = c.procName
child, child2, single
5000
38 - With: procName, variable.varName
procedure p; variable v;
Select BOOLEAN with p.procName = v.varName
FALSE
5000
39 - With: procName, read.varName
procedure p; read r;
Select BOOLEAN with p.procName = r.varName
FALSE
5000
40 - With: procName, print.varName
procedure p; print pr;
Select BOOLEAN with p.procName = pr.varName
FALSE
5000
41 - With: procName, constant.value (invalid)
procedure p; constant c;
Select p with p.procName = c.value
SemanticError
5000
42 - With: procName, stmt.stmt# (invalid)
procedure p; stmt s;
Select p with p.procName = stmt.stmt#
SemanticError
5000
43 - With: procName, read.stmt# (invalid)
procedure p; read r;
Select p with p.procName = r.stmt#
SemanticError
5000
44 - With: procName, print.stmt# (invalid)
procedure p; print pr;
Select p with p.procName = pr.stmt#
SemanticError
5000
45 - With: procName, call.stmt# (invalid)
procedure p; call c;
Select p with p.procName = c.stmt#
SemanticError
5000
46 - With: procName, while.stmt# (invalid)
procedure p; while w;
Select p with p.procName = w.stmt#
SemanticError
5000
47 - With: procName, if.stmt# (invalid)
procedure p; if ifs;
Select p with p.procName = ifs.stmt#
SemanticError
5000
48 - With: procName, assign.stmt# (invalid)
procedure p; assign a;
Select p with p.procName = a.stmt#
SemanticError
5000
49 - With: varName, ident (valid)
variable v;
Select BOOLEAN with v.varName = "x"
TRUE
5000
50 - With: varName, ident (invalid)
variable v;
Select BOOLEAN with v.varName = "InvalidVariable"
FALSE
5000
51 - With: varName, int (invalid)
variable v;
Select v with v.varName = 1
SemanticError
5000
52 - With: varName, procedure.procName
variable v; procedure p;
Select BOOLEAN with v.varName = p.procName
FALSE
5000
53 - With: varName, call.procName
variable v; call c;
Select BOOLEAN with v.varName = c.procName
FALSE
5000
54 - With: varName, variable.varName
variable v, v1;
Select <v, v1> with v.varName = v1.varName
a a,assign assign,b b,c c,call call,e e,if if,p p,print print,q q,r r,read read,var var,while while,y y,z z, x x
5000
55 - With: varName, read.varName
variable v; read r;
Select BOOLEAN with v.varName = r.varName
TRUE
5000
56 - With: varName, print.varName
variable v; print p;
Select BOOLEAN with v.varName = p.varName
TRUE
5000
57 - With: varName, constant.value (invalid)
variable v; constant c;
Select v with v.varName = c.value
SemanticError
5000
58 - With: varName, stmt.stmt# (invalid)
variable v; stmt s;
Select v with v.varName = s.stmt#
SemanticError
5000
59 - With: varName, read.stmt# (invalid)
variable v; read r;
Select v with v.varName = r.stmt#
SemanticError
5000
60 - With: varName, print.stmt# (invalid)
variable v; print p;
Select v with v.varName = p.stmt#
SemanticError
5000
61 - With: varName, call.stmt# (invalid)
variable v; call c;
Select v with v.varName = c.stmt#
SemanticError
5000
62 - With: varName, while.stmt# (invalid)
variable v; while w;
Select v with v.varName = w.stmt#
SemanticError
5000
63 - With: varName, if.stmt# (invalid)
variable v; if ifs;
Select v with v.varName = ifs.stmt#
SemanticError
5000
64 - With: varName, assign.stmt# (invalid)
variable v; assign a;
Select v with v.varName = a.stmt#
SemanticError
5000
65 - With: value, ident (invalid)
constant c;
Select c with c.value = "x"
SemanticError
5000
66 - With: value, int (invalid)
constant c;
Select BOOLEAN with c.value = 12345
FALSE
5000
67 - With: value, int (valid)
constant c;
Select BOOLEAN with c.value = 1234567
TRUE
5000
68 - With: value, procedure.procName (invalid)
constant c; procedure p;
Select c with c.value = p.procName
SemanticError
5000
69 - With: value, call.procName (invalid)
constant c; call c;
Select c with c.value = c.procName
SemanticError
5000
70 - With: value, variable.varName (invalid)
constant c; variable v;
Select c with c.value = v.varName
SemanticError
5000
71 - With: value, read.varName (invalid)
constant c; read r;
Select c with c.value = r.varName
SemanticError
5000
72 - With: value, print.varName (invalid)
constant c; print p;
Select c with c.value = p.varName
SemanticError
5000
73 - With: value, constant.value
constant c, c1;
Select c with c.value = c1.value
11,12,1234567,13,14,17,26,29,36,41,47,51,54321,55,55555,6,8,9,99, 1, 10, 2, 3
5000
74 - With: value, stmt.stmt#
constant c; stmt s;
Select c with c.value = s.stmt#
11,12,13,14,17,26,29,36,41,47,51,55,6,8,9, 1, 2, 3, 10
5000
75 - With: value, read.stmt#
constant c; read r;
Select c with c.value = r.stmt#
9
5000
76 - With: value, print.stmt#
constant c; print p;
Select c with c.value = p.stmt#
11
5000
77 - With: value, call.stmt#
constant c; call ca;
Select c with c.value = ca.stmt#
10
5000
78 - With: value, while.stmt#
constant c; while w;
Select c with c.value = w.stmt#
13,3
5000
79 - With: value, if.stmt#
constant c; if ifs;
Select c with c.value = ifs.stmt#
17
5000
80 - With: value, assign.stmt#
constant c; assign a;
Select c with c.value = a.stmt#
1,12,14,2,26,29,36,41,47,51,55,6,8
5000
81 - With: stmt#, ident (invalid)
stmt s;
Select s with s.stmt# = "x"
SemanticError
5000
82 - With: stmt#, int (invalid)
stmt s;
Select BOOLEAN with s.stmt# = 1000
FALSE
5000
83 - With: stmt#, int (valid)
stmt s;
Select BOOLEAN with s.stmt# = 1
TRUE
5000
84 - With: stmt#, procedure.procName (invalid)
stmt s; procedure p;
Select s with s.stmt# = p.procName
SemanticError
5000
85 - With: stmt#, call.procName (invalid)
stmt s; call c;
Select s with s.stmt# = c.procName
SemanticError
5000
86 - With: stmt#, variable.varName (invalid)
stmt s; variable v;
Select s with s.stmt# = v.varName
SemanticError
5000
87 - With: stmt#, read.varName (invalid)
stmt s; read r;
Select s with s.stmt# = r.varName
SemanticError
5000
88 - With: stmt#, print.varName (invalid)
stmt s; print p;
Select s with s.stmt# = p.varName
SemanticError
5000
89 - With: stmt#, constant.value
stmt s; constant c;
Select s with s.stmt# = c.value
1, 2, 3, 10, 11,12,13,14,17,26,29,36,41,47,51,55,6,8,9
5000
90 - With: stmt#, stmt.stmt#
stmt s, s1;
Select BOOLEAN with s.stmt# = s1.stmt#
TRUE
5000
91 - With: stmt#, read.stmt#
stmt s; read r;
Select s with s.stmt# = r.stmt#
20,22,25,34,37,45,54,60,9
5000
92 - With: stmt#, print.stmt#
stmt s; print p;
Select s with s.stmt# = p.stmt#
11,23,31,33,38,43,59,61
5000
93 - With: stmt#, call.stmt#
stmt s; call c;
Select s with s.stmt# = c.stmt#
10,24,35,39,52,57,58
5000
94 - With: stmt#, while.stmt#
stmt s; while w;
Select s with s.stmt# = w.stmt#
13,16,27,3
5000
95 - With: stmt#, if.stmt#
stmt s; if ifs;
Select s with s.stmt# = ifs.stmt#
17,30,40,46,5,56,7
5000
96 - With: stmt#, assign.stmt#
stmt s; assign a;
Select s with s.stmt# = a.stmt#
1,12,15,18,19,2,28,32,36,4,41,42,44,47,48,49,50,51,53,55,6,14,21,26,29,8
5000
97 - Ifs Pattern
if ifs; variable v;
Select <ifs, v> pattern ifs(v,_,_)
5 x,7 y,17 x,17 y,30 x,40 p,40 q,46 a,46 b,56 y,56 z
5000
98 - Ifs Pattern
if ifs;
Select ifs pattern ifs(_,_,_)
5, 7, 17, 30, 40, 46, 56
5000
99 - While Pattern
while w;
Select w pattern w(_,_)
3, 13, 16, 27
5000
100 - While Pattern
while w; variable v;
Select <w, v> pattern w(v,_)
3 p, 3 q, 13 p, 16 x, 16 a, 16 b, 27 x
5000
101 - While Pattern
while w;
Select w pattern w("p",_)
3, 13
5000
102 - Ifs Pattern
if ifs;
Select ifs pattern ifs("x",_,_)
5, 17, 30
5000